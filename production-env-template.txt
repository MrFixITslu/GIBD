# üîê PRODUCTION ENVIRONMENT TEMPLATE
# Copy this file to .env.production and fill in the actual values
# NEVER commit actual secrets to version control

# ================================
# üåê API Configuration
# ================================
# Full URL to your API endpoint (if using external API)
# Example: https://api.yourdomain.com
VITE_API_URL=

# ================================
# ü§ñ AI Services
# ================================
# Google Gemini API Key for AI features
# Get from: https://console.cloud.google.com/apis/credentials
VITE_GEMINI_API_KEY=

# ================================
# üó∫Ô∏è Maps & Location
# ================================
# Google Maps API Key for map features
# Get from: https://console.cloud.google.com/apis/credentials
VITE_GOOGLE_MAPS_API_KEY=

# ================================
# üîí NETLIFY FUNCTIONS (Server-side only)
# ================================
# PostgreSQL Database URL (Neon, Supabase, etc.)
# Format: postgresql://username:password@host:port/database
NETLIFY_DATABASE_URL=

# JWT Secret for authentication (32+ characters)
# Generate with: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
JWT_SECRET=

# CORS allowed origins (production domain)
# Example: https://yourapp.netlify.app
CORS_ORIGIN=

# ================================
# üõ°Ô∏è SECURITY NOTES
# ================================
# 1. All VITE_ prefixed variables are exposed to the browser
# 2. Never put secrets in VITE_ variables
# 3. Use strong, unique passwords and API keys
# 4. Rotate secrets regularly
# 5. Use environment-specific keys (don't reuse dev keys in prod)

# ================================
# üìù SETUP CHECKLIST
# ================================
# ‚ñ° Set up PostgreSQL database (Neon recommended)
# ‚ñ° Create Google Cloud project for API keys
# ‚ñ° Enable required APIs (Gemini, Maps)
# ‚ñ° Generate strong JWT secret
# ‚ñ° Configure CORS for production domain
# ‚ñ° Test all endpoints work with production URLs
# ‚ñ° Verify no console errors in production build
